syntax = "proto2";

// Reports the encoder ticks for each arm joint
message ArmEncodersMessage {
    required int32 shoulderLiftTicks    = 1;
    required int32 shouldSwivelTicks    = 2;
    required int32 elbowLiftTicks       = 3;
    required int32 elbowSwivelTicks     = 4;
    required int32 wristLiftTicks       = 5;
    required int32 wristSwivelTicks     = 6;
}

message DriveEncodersMessage {  
    optional int32 leftSpeed            = 1;        
    optional int32 rightSpeed           = 2;
    required int32 timestamp            = 3;
}

message RequestMessage {  
    required bool  requestSpeed         = 1;
    required bool  requestDiagnostics   = 2;
    optional int32 leftSpeed            = 3;        
    optional int32 rightSpeed           = 4;
    optional int32 duration             = 5;
    required int32 timestamp            = 6;
}

message IMUMessage {
    required int32 timestamp = 1;

    optional float quaternionX = 2;
    optional float quaternionY = 3;
    optional float quaternionZ = 4;
    optional float quaternionW = 5;

    optional float linearAccelX = 6;
    optional float linearAccelY = 7;
    optional float linearAccelZ = 8;

    optional float angularVelocityX = 9;
    optional float angularVelocityY = 10;
    optional float angularVelocityZ = 11;
}


message BatteryMessage {
    // cell voltages
    optional float mainVoltage = 1;

    optional float cell1Voltage = 2;
    optional float cell2Voltage = 3;
    optional float cell3Voltage = 4;
    optional float cell4Voltage = 5;
    optional float cell5Voltage = 6;
    optional float cell6Voltage = 7;
    optional float cell7Voltage = 8;
    optional float cell8Voltage = 9;

    // charge state
    optional float chargePercentage = 10;
    
    // discharge state
    optional float dischargeCurrent = 11;
}

/**
Commands.
- StatusLightCommand - statuslight states
**/

message StatusLightCommand {
    optional int32 color = 1;
    optional int32 display = 2;
}

message ScienceModuleCommand {
    required int32 rotateTurntable = 1;
}


