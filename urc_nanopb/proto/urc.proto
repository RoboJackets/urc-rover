syntax = "proto2";

// Reports the encoder ticks for each arm joint
message ArmEncodersMessage {
    required int32 shoulderLiftTicks    = 1;
    required int32 shouldSwivelTicks    = 2;
    required int32 elbowLiftTicks       = 3;
    required int32 elbowSwivelTicks     = 4;
    required int32 wristLiftTicks       = 5;
    required int32 wristSwivelTicks     = 6;
}

message DrivetrainRequest {  
    required int32 m1Setpoint           = 1;  
    required int32 m2Setpoint           = 2;
    required int32 m3Setpoint           = 3;
    required int32 m4Setpoint           = 4;
    required int32 m5Setpoint           = 5;
    required int32 m6Setpoint           = 6;      
}

message NewStatusLightCommand {
    required int32 redEnabled = 1;
    required int32 blueEnabled = 2;
    required int32 greenEnabled = 3;
    required int32 redBlink = 4;
    required int32 blueBlink = 5;
    required int32 greenBlink = 6;
}

message TeensyMessage {
    required int32 messageID = 1;
    required int32 m1Setpoint           = 2;  
    required int32 m2Setpoint           = 3;
    required int32 m3Setpoint           = 4;
    required int32 m4Setpoint           = 5;
    required int32 m5Setpoint           = 6;
    required int32 m6Setpoint           = 7;      
    required int32 redEnabled = 8;
    required int32 blueEnabled = 9;
    required int32 greenEnabled = 10;
    required int32 redBlink = 11;
    required int32 blueBlink = 12;
    required int32 greenBlink = 13;
}

message RequestMessage {  
    required bool  requestSpeed         = 1;
    required bool  requestDiagnostics   = 2;
    optional int32 leftSpeed            = 3;        
    optional int32 rightSpeed           = 4;
    optional int32 duration             = 5;
    required int32 timestamp            = 6;
}

message IMUMessage {
    required int32 timestamp = 1;

    optional float quaternionX = 2;
    optional float quaternionY = 3;
    optional float quaternionZ = 4;
    optional float quaternionW = 5;

    optional float linearAccelX = 6;
    optional float linearAccelY = 7;
    optional float linearAccelZ = 8;

    optional float angularVelocityX = 9;
    optional float angularVelocityY = 10;
    optional float angularVelocityZ = 11;
}


message BatteryMessage {
    // cell voltages
    optional float mainVoltage = 1;

    optional float cell1Voltage = 2;
    optional float cell2Voltage = 3;
    optional float cell3Voltage = 4;
    optional float cell4Voltage = 5;
    optional float cell5Voltage = 6;
    optional float cell6Voltage = 7;
    optional float cell7Voltage = 8;
    optional float cell8Voltage = 9;

    // charge state
    optional float chargePercentage = 10;
    
    // discharge state
    optional float dischargeCurrent = 11;
}


// Commands

message StatusLightCommand {
    optional int32 color = 1;
    optional int32 display = 2;
}

message ScienceModuleCommand {
    required int32 rotateTurntable = 1;
}

message DriveCurrentRequest {
    optional float leftCurrentAmps = 1;
    optional float rightCurrentAmps = 2;
}

message StatusLightRequest {
    optional int32 color = 1;
    optional bool blink = 2;
}

message ArmPositionRequest {
    required int64 shoulderTicks = 1;
    required int64 bicepTicks = 2;
    required int64 elbowTicks = 3;
    required int64 wristTicks = 4;
    required int64 clawTicks = 5;
}

message ArmClawRequest {
    optional int32 clawVelTicksPerSecond = 1;
}

message DriveFeedback {
    optional int64 leftPosTicks = 1;
    optional int64 rightPosTicks = 2;
    optional int64 leftVelTicksPerSecond = 3;
    optional int64 rightVelTicksPerSecond = 4;
    optional int64 leftCurrentAmps = 5;
    optional int64 rightCurrentAmps = 6;
}

message ArmFeedback {
    required int64 shoulderPosTicks = 1;
    required int64 shoulderVelTicksPerSecond = 2;
    required int64 shoulderCurrentAmps = 3;

    required int64 bicepPosTicks = 4;
    required int64 bicepVelTicksPerSecond = 5;
    required int64 bicepCurrentAmps = 6;

    required int64 elbowPosTicks = 7;
    required int64 elbowVelTicksPerSecond = 8;
    required int64 elbowCurrentAmps = 9;

    required int64 wristPosTicks = 10;
    required int64 wristVelTicksPerSecond = 11;
    required int64 wristCurrentAmps = 12;

    required int64 clawPosTicks = 13;
    required int64 clawVelTicksPerSecond = 14;
    required int64 clawCurrentAmps = 15;
}


