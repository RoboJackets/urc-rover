<?xml version='1.0'?>

<robot name="wallii" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:include filename="walli_prop.xacro"/>
  <xacro:include filename="walli_inertials.xacro"/>
  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
  <!-- Import wallii arm urdf to walli's urdf. -->
  <xacro:include filename="WalliiArmV3.urdf"/>
  
  <!--- Something about this macro breaks the urdf parser. -->
  <!-- The "wheel" macro defines an axle carrier, axle, and wheel. -->
  <xacro:macro name="wheel" params="lr_prefix fr_prefix lr_pos fr_pos">
    <link name="${lr_prefix}_${fr_prefix}_wheel">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <cylinder radius="${tire_dia / 2}" length="${tire_width}"/>
        </geometry>
        <material name="tire_mat"/>
      </visual>

      <collision>
        <origin xyz="0 0 0"/>
        <geometry>
          <cylinder radius="${tire_dia / 2}" length="${tire_width}"/>
        </geometry>
      </collision>

      <xacro:thick_walled_tube_inertial
          inner_rad="${hub_dia / 2}" outer_rad="${tire_dia / 2}"
          height="${tire_width}" mass="${wheel_mass}"/>
    </link>
    
    <joint name="${lr_prefix}_${fr_prefix}_axle" type="continuous">
      <parent link="base_link"/>
      <child link="${lr_prefix}_${fr_prefix}_wheel"/>
      <origin xyz="${fr_pos}
                   ${lr_pos}
                   ${- body_clearance}"
              rpy="${degrees_90} 0 0"/>
      <axis xyz="0 0 -1"/>
      <limit effort="${axle_eff_limit}" velocity="${axle_vel_limit}"/>
      <dynamics
      damping="0"
      friction="4.0" />
    </joint>

    
    <gazebo reference="${lr_prefix}_${fr_prefix}_wheel">
      <material>Gazebo/Black</material>
    </gazebo>
  </xacro:macro>
  
  <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.01"/>
      </geometry>
      <material name="body_mat"/>
    </visual>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Green</material>
  </gazebo>
  
    <!-- body -->
  <link name="body">
    <visual>
      <origin xyz="0 0 ${-body_height / 2}"/>
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}"/>
      </geometry>
      <material name="body_mat"/>
    </visual>

    <collision>
      <origin xyz="0 0 ${-body_height / 2}"/>
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}"/>
      </geometry>
    </collision>

    <xacro:solid_cuboid_inertial
        width="${body_length}" depth="${body_width}"
        height="${body_height}" mass="${body_mass}">
      <origin xyz="0 0 ${-body_height / 2}"/>
    </xacro:solid_cuboid_inertial>
  </link>
  <gazebo reference="body">
    <material>Gazebo/Grey</material>
  </gazebo>

  <joint name="base_link_to_chasis" type="fixed">
    <parent link="base_link"/>
    <child link="body"/>
  </joint>

  <!-- Wheels    -->
  <xacro:wheel lr_prefix="left_bogie" fr_prefix="front"
               lr_pos="${track / 2}"
               fr_pos="${x_center_bogie + wheelbase_bogie / 2}"
               />
  <xacro:wheel lr_prefix="left_bogie" fr_prefix="rear"
               lr_pos="${track / 2}"
               fr_pos="${x_center_bogie - wheelbase_bogie / 2}"
               />
  <xacro:wheel lr_prefix="left_rocker" fr_prefix="rear"
               lr_pos="${track / 2}"
               fr_pos="${x_center_rocker - wheelbase_rocker / 2}"
               />
  <xacro:wheel lr_prefix="right_bogie" fr_prefix="front"
               lr_pos="${- track / 2}"
               fr_pos="${x_center_bogie + wheelbase_bogie / 2}"
               />
  <xacro:wheel lr_prefix="right_bogie" fr_prefix="rear"
               lr_pos="${- track / 2}"
               fr_pos="${x_center_bogie - wheelbase_bogie / 2}"
               />
  <xacro:wheel lr_prefix="right_rocker" fr_prefix="rear"
               lr_pos="${- track / 2}"
               fr_pos="${x_center_rocker - wheelbase_rocker / 2}"
               />
  
  <!-- connect rover and arm -->
  <joint name="arm_to_rover" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="arm_base_link"/>
    <dynamics damping="60.0" friction="4.0"/>
  </joint>
    
    <!-- 
    Mock/Untested ros2 control scheme for operating the rover with ros2 control.
    This matches how the control is supposed to be set up, but is commented out
    because the way the urdf is designed, it interferes with the arm control.
    -->
    <!--
    <ros2_control name="rover_control" type="system">
    <hardware>
      <plugin>ros2_control_demo_hardware/VelocityActuatorHardware</plugin>
    </hardware>

    <joint name="left_bogie_front_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>
    
    <joint name="left_bogie_rear_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>
    
    <joint name="left_rocker_rear_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>
    
    <joint name="right_bogie_front_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>
    
    <joint name="right_bogie_rear_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>
    
    <joint name="right_rocker_rear_axle">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="velocity"/>
    </joint>


    <transmission name="rover_transmission">
      <plugin>transmission_interface/SimpleTransmission</plugin>
      <joint name="left_bogie_front_axle" role="left_bogie_front_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
      
      <joint name="left_bogie_rear_axle" role="left_bogie_rear_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
      
      <joint name="left_rocker_rear_axle" role="left_rocker_rear_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
      
      <joint name="right_bogie_front_axle" role="right_bogie_front_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
      
      <joint name="right_bogie_rear_axle" role="right_bogie_rear_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
      
      <joint name="right_rocker_rear_axle" role="right_rocket_rear_axle">
        <mechanical_reduction>1</mechanical_reduction>
      </joint>
        
    </transmission>
    </ros2_control>
    -->

  <link name="imu">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
  </link>

  <joint name="imu_joint" type="fixed">
		<axis xyz="1 0 0"/>
		<origin xyz="0 0 0.1"/>
		<parent link="base_link"/>
		<child link="imu"/>
	</joint>

	<gazebo reference="imu">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
     <imu>
     	<angular_velocity>
     	  <x>
     	    <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <!-- gps -->
  <link name="gps">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
  </link>
  
   <joint name="gps_joint" type="fixed">
		<axis xyz="1 0 0"/>
		<origin xyz="0 0 0.05"/>
		<parent link="base_link"/>
		<child link="gps"/>
	</joint>

  <gazebo reference="gps">
    <sensor name="gps" type="gps">
      <plugin filename="libgazebo_ros_gps_sensor.so" name="gps_plugin">
          <ros>
            <namespace>/gps</namespace>
            <remapping>~/out:=data</remapping>
          </ros>
          <frame_name>gps</frame_name>
        </plugin>
        <always_on>true</always_on>
        <updateRate>30</updateRate>
    </sensor>
  </gazebo>

   <!-- LIDAR -->
   <link name="lidar_support">
        <visual>
            <geometry>
                <box size="${lidar_support_x_dim} ${lidar_support_y_dim} ${lidar_support_z_dim}"/>
            </geometry>
        </visual>
    </link>

    <joint name="base_link_to_lidar_support" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_support"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
    </joint>
    <!-- collision range = min sensing distance -->
    <!-- gpu does gpu acceleration -->
    <xacro:VLP-16 parent="lidar_support" name="lidar" topic="/scan" hz="${lidar_hz}" samples="${lidar_samples}" gpu="false">
        <origin xyz="${lidar_x} 0.0 ${lidar_z}" rpy="0 ${lidar_pitch} 0" />
    </xacro:VLP-16>
  
  <!-- cameras -->
  <link name="cam/center">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>

    
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
  </link>
  
  <joint name="center_cam_joint" type="fixed">
	<axis xyz="1 0 0"/>
	<!-- Edit these parameters to change camera orientation -->
	<origin xyz="0.15 0 -0.1" rpy = "0 0 -.14"/>
	<parent link="imu"/>
	<child link="cam/center"/>
   </joint>

   <gazebo reference="cam/center">
    <sensor name="center_sensor" type="camera">
        <plugin name="center_sensor" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/image</namespace>
          <remapping>~/image_raw:=center_img</remapping>
          <remapping>~/camera_info:=camera_info</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <camera name="cam/center">
	<horizontal_fov>1.3962634</horizontal_fov>
	<image>
	<width>800</width>
	<height>800</height>
	<format>R8G8B8</format>
	</image>
	<clip>
	<near>0.02</near>
	<far>300</far>
	</clip>
	<noise>
	<type>gaussian</type>
	<mean>0</mean>
	<stddev>0.007</stddev>
	</noise>
      </camera>
    </sensor>
  </gazebo>
  
  <link name="cam/left">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
  </link>
  
  <joint name="left_cam_joint" type="fixed">
	<axis xyz="1 0 0"/>
	<!-- Edit these parameters to change camera orientation -->
	<origin xyz="0 0.1 0.0" rpy = "0 0 1.5"/>
	<parent link="base_link"/>
	<child link="cam/left"/>
   </joint>

   <gazebo reference="cam/left">
    <sensor name="left_sensor" type="camera">
        <plugin name="left_sensor" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/image</namespace>
          <remapping>~/image_raw:=left_img</remapping>
          <remapping>~/camera_info:=camera_info</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <camera name="cam/left">
        <horizontal_fov>1.3962634</horizontal_fov>
	<image>
	<width>800</width>
	<height>800</height>
	<format>R8G8B8</format>
	</image>
	<clip>
	<near>0.02</near>
	<far>300</far>
	</clip>
	<noise>
	<type>gaussian</type>
	<mean>0</mean>
	<stddev>0.007</stddev>
	</noise> 
      </camera>
    </sensor>
  </gazebo>
  
  
  <link name="cam/right">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
  </link>
  
  <joint name="right_cam_joint" type="fixed">
	<axis xyz="1 0 0"/>
	<!-- Edit these parameters to change camera orientation -->
	<origin xyz="0 -0.1 0.0" rpy = "0 0 -1.5"/>
	<parent link="base_link"/>
	<child link="cam/right"/>
   </joint>
   
   <gazebo reference="cam/right">
    <sensor name="right_sensor" type="camera">
        <plugin name="right_sensor" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/image</namespace>
          <remapping>~/image_raw:=right_img</remapping>
          <remapping>~/camera_info:=camera_info</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <camera name="cam/right">
        <horizontal_fov>1.3962634</horizontal_fov>
	<image>
	<width>800</width>
	<height>800</height>
	<format>R8G8B8</format>
	</image>
	<clip>
	<near>0.02</near>
	<far>300</far>
	</clip>
	<noise>
	<type>gaussian</type>
	<mean>0</mean>
	<stddev>0.007</stddev>
	</noise>
      </camera>
    </sensor>
  </gazebo>

  <gazebo>
    <sensor name="imu" type="imu">
      <always_on>true</always_on>
      <!-- Publish at 30 hz -->
      <update_rate>30</update_rate>
      <plugin name="imu" filename="libgazebo_ros_imu_sensor.so">
        <ros>
          <!-- Will publish to /imu/data -->
          <namespace>/imu</namespace>
          <argument>~/out:=data</argument>
        </ros>
        <frame_name>imu</frame_name>
      </plugin>
    </sensor>    
    
    <sensor type="camera" name="center_sensor">
          <!-- Set always_on only sensor, not on plugin -->
          <always_on>0</always_on>

          <!-- Set update_rate only sensor, not on plugin -->
          <update_rate>1</update_rate>

          <!-- Use camera, not camera_triggered -->
          <plugin name="center_sensor" filename="libgazebo_ros_camera.so">
            <!-- Change namespace, camera name and topics so:
                 * Images are published to: /custom_ns/custom_camera/custom_image
                 * Camera info is published to: /custom_ns/custom_camera/custom_info 
            -->
            <ros>
              <namespace>/image</namespace>
              <argument>~/image_raw:=center_img</argument>
              <argument>~/camera_info:=center_info</argument>
            </ros>

            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <camera_name>center_camera</camera_name>

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>center_tf</frame_name>

            <hack_baseline>0.07</hack_baseline>

            <!-- No need to repeat distortion parameters or to set autoDistortion -->
          </plugin>
        </sensor>
     
     <sensor type="camera" name="left_sensor">
          <!-- Set always_on only sensor, not on plugin -->
          <always_on>0</always_on>

          <!-- Set update_rate only sensor, not on plugin -->
          <update_rate>1</update_rate>

          <!-- Use camera, not camera_triggered -->
          <plugin name="left_sensor" filename="libgazebo_ros_camera.so">
            <!-- Change namespace, camera name and topics so:
                 * Images are published to: /custom_ns/custom_camera/custom_image
                 * Camera info is published to: /custom_ns/custom_camera/custom_info 
            -->
            <ros>
              <namespace>/image</namespace>
              <argument>~/image_raw:=left_img</argument>
              <argument>~/camera_info:=left_info</argument>
            </ros>

            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <camera_name>left_camera</camera_name>

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>left_tf</frame_name>

            <hack_baseline>0.07</hack_baseline>

            <!-- No need to repeat distortion parameters or to set autoDistortion -->
          </plugin>
        </sensor>
      
      <sensor type="camera" name="right_sensor">
          <!-- Set always_on only sensor, not on plugin -->
          <always_on>0</always_on>

          <!-- Set update_rate only sensor, not on plugin -->
          <update_rate>1</update_rate>

          <!-- Use camera, not camera_triggered -->
          <plugin name="right_sensor" filename="libgazebo_ros_camera.so">
            <!-- Change namespace, camera name and topics so:
                 * Images are published to: /custom_ns/custom_camera/custom_image
                 * Camera info is published to: /custom_ns/custom_camera/custom_info 
            -->
            <ros>
              <namespace>/image</namespace>
              <argument>~/image_raw:=right_img</argument>
              <argument>~/camera_info:=right_info</argument>
            </ros>

            <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
            <camera_name>right_camera</camera_name>

            <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
            <frame_name>right_tf</frame_name>

            <hack_baseline>0.07</hack_baseline>

            <!-- No need to repeat distortion parameters or to set autoDistortion -->
          </plugin>
        </sensor>
        
      <plugin name="gazebo_ros_p3d" filename="libgazebo_ros_p3d.so">
        <alwaysOn>true</alwaysOn>
        <update_rate>30.0</update_rate>
        <ros>
          <namespace>/ground_truth</namespace>
          <remapping>odom:=state_raw</remapping>
        </ros>
        <body_name>base_link</body_name>
        <frame_name>world</frame_name>

        <xyz_offset>0 0 0</xyz_offset>
        <rpy_offset>0.0 0.0 0.0</rpy_offset>
        <gaussian_noise>0.00</gaussian_noise>
      </plugin>
  
  </gazebo>

</robot>
